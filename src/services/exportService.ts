import type { SalaryEntry } from '../types/salary';
import { formatCurrency } from '../utils/calculations';
import { formatDate } from '../utils/formatters';

export const exportService = {
  exportToCSV(data: SalaryEntry[], filename: string = 'salary_data.csv'): void {
    const headers = [
      'Role',
      'Company',
      'Salary',
      'Experience',
      'Education',
      'Location',
      'Industry',
      'Job Type',
      'Company Size',
      'Gender',
      'Bonus',
      'Date',
    ];

    const rows = data.map((entry) => [
      entry.role,
      entry.company,
      entry.salary,
      entry.experience,
      entry.education,
      entry.location,
      entry.industry,
      entry.jobType,
      entry.companySize,
      entry.gender || 'N/A',
      entry.bonus || 0,
      formatDate(entry.startDate),
    ]);

    const csvContent = [
      headers.join(','),
      ...rows.map((row) => row.map((cell) => `"${cell}"`).join(',')),
    ].join('\n');

    this.downloadFile(csvContent, filename, 'text/csv');
  },

  exportToJSON(data: any, filename: string = 'salary_data.json'): void {
    const jsonContent = JSON.stringify(data, null, 2);
    this.downloadFile(jsonContent, filename, 'application/json');
  },

  async generatePDFReport(data: {
    title: string;
    stats: any;
    salaries: SalaryEntry[];
  }): Promise<void> {
    // For now, generate HTML report that can be printed as PDF
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${data.title}</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 40px; }
          h1 { color: #2563eb; }
          .stat { margin: 20px 0; padding: 15px; background: #f3f4f6; border-radius: 8px; }
          table { width: 100%; border-collapse: collapse; margin-top: 20px; }
          th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
          th { background: #2563eb; color: white; }
        </style>
      </head>
      <body>
        <h1>${data.title}</h1>
        <div class="stat">
          <h2>Summary Statistics</h2>
          <p><strong>Average Salary:</strong> ${formatCurrency(data.stats.average)}</p>
          <p><strong>Median Salary:</strong> ${formatCurrency(data.stats.median)}</p>
          <p><strong>Total Entries:</strong> ${data.stats.count}</p>
        </div>
        <h2>Salary Data</h2>
        <table>
          <thead>
            <tr>
              <th>Role</th>
              <th>Company</th>
              <th>Salary</th>
              <th>Experience</th>
              <th>Location</th>
            </tr>
          </thead>
          <tbody>
            ${data.salaries
              .slice(0, 50)
              .map(
                (s) => `
              <tr>
                <td>${s.role}</td>
                <td>${s.company}</td>
                <td>${formatCurrency(s.salary)}</td>
                <td>${s.experience} years</td>
                <td>${s.location}</td>
              </tr>
            `
              )
              .join('')}
          </tbody>
        </table>
        <p style="margin-top: 40px; color: #666;">Generated by FairPay on ${formatDate(new Date())}</p>
      </body>
      </html>
    `;

    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'salary_report.html';
    link.click();
    URL.revokeObjectURL(url);
  },

  downloadFile(content: string, filename: string, mimeType: string): void {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  },

  copyToClipboard(text: string): Promise<void> {
    return navigator.clipboard.writeText(text);
  },
};
